---
title: 'Teste '
summary: teste
publishedDate: '2024-03-15'
coverImage: coverImage.jpeg
wordCount: 4444
authors:
  - valber-junior
---
{% youtubeEmbed youtubeLink="https://www.youtube.com/watch?v=6JnkwfrAI-U" /%}

# Teste

```javascript

/* eslint-disable @next/next/no-img-element */
import { component, fields } from "@keystatic/core";

import Banner from "./Banner";
import InlineCTA from "./InlineCTA";
import Divider from "./Divider";
import YouTubeEmbed from "./YouTubeEmbed";
import TweetEmbed from "./TweetEmbed";
import LoopingVideo from "./LoopingVideo";
import ImageComponent from "./Image";
import Testimonial from "./Testimonial";
import useObjectURL from "@/utils/use-object-url";
import { Box, BoxProps, Flex } from "@keystar/ui/layout";
import { ProgressCircle } from "@keystar/ui/progress";

const ImagePreview = ({ data }: { data: Uint8Array } & BoxProps) => {
  const url = useObjectURL(data)
  return <img style={{ width: '100%', display: 'block' }} src={url || undefined} alt="" />
}

const BoxWrapper = (props:any) => {
  return (
    <Box
      maxWidth="container.xsmall"
      border="neutral"
      borderRadius="regular"
      padding="regular"
      {...props}
    />
  )
}

export const ComponentBlocks = {
  divider: component({
    label: "Divider",
    preview: (props) => <Divider noIcon={props.fields.noIcon.value} />,
    schema: {
      noIcon: fields.checkbox({ label: "No Icon" }),
    },
  }),
  inlineCta: component({
    label: "Inline CTA",
    preview: (props) => (
      <InlineCTA
        title={props.fields.title.value}
        summary={props.fields.summary.value}
        linkButton={{
          externalLink: props.fields.externalLink.value,
          href: props.fields.href.value || "",
          label: props.fields.linkLabel.value,
        }}
      />
    ),
    schema: {
      title: fields.text({ label: "Title" }),
      summary: fields.text({ label: "Summary" }),
      linkLabel: fields.text({ label: "Link Label" }),
      href: fields.url({
        label: "Link",
        defaultValue: "",
        validation: { isRequired: true },
      }),
      externalLink: fields.checkbox({
        label: "External Link",
      }),
    },
  }),
  banner: component({
    label: "Banner",
    preview: (props) => (
      <Banner
        heading={props.fields.heading.value}
        bodyText={props.fields.bodyText.value}
        externalLink={{
          href: props.fields.externalLinkHref.value || "",
          label: props.fields.externalLinkLabel.value,
        }}
      />
    ),
    schema: {
      heading: fields.text({ 
        label: "Heading",
      }),
      bodyText: fields.text({
        label: "Body Text",
      }),
      externalLinkHref: fields.url({
        label: "External Link",
      }),
      externalLinkLabel: fields.text({
        label: "Link Label",
      }),
    },
  }),
  youtubeEmbed: component({
    label: "YouTube Embed",
    preview: (props) => {
      const youtubeLink = props.fields.youtubeLink.value;
      return youtubeLink ? <YouTubeEmbed youtubeLink={youtubeLink} /> : null;
    },
    schema: {
      youtubeLink: fields.url({
        label: "YouTube URL",
      }),
    },
  }),
  tweetEmbed: component({
    label: "Tweet Embed",
    preview: (props) => <TweetEmbed tweet={props.fields.tweet.value || ""} />,
    schema: {
      tweet: fields.url({
        label: "Tweet URL",
      }),
    },
  }),
  image: component({
    preview: (props) => {
      return (
        <BoxWrapper>
          {props.fields.image.value ? (
            <ImagePreview data={props.fields.image.value.data} />
          ) : (
            <Flex direction="column" gap="medium" alignItems="center">
              <ProgressCircle aria-label="Loadingâ€¦" isIndeterminate />
            </Flex>
          )}
        </BoxWrapper>
      )
    },
    label: 'Image',
    schema: {
      image: fields.image({
        label: 'Image',
        validation: { isRequired: true },
        directory: '/content/images/posts/',
        publicPath: '/content/images/posts/',
      }),
      width: fields.integer({ label: 'Width', defaultValue: 640 }),
      height: fields.integer({ label: 'Height', defaultValue: 480 }),
      alt: fields.text({
        label: "Alt text",
        validation: { length: { min: 4 } },
      }),
      caption: fields.text({ label: "Caption" }),
    },
  }),
  testimonial: component({
    label: "Testimonial",
    preview: (props) => (
      <Testimonial
        quote={props.fields.quote.value}
        author={props.fields.author.value}
        workplaceOrSocial={props.fields.workplaceOrSocial.value}
        socialLink={props.fields.socialLink.value || ""}
      />
    ),
    schema: {
      quote: fields.text({
        label: "Quote",
        multiline: true,
      }),
      author: fields.text({
        label: "Author",
      }),
      workplaceOrSocial: fields.text({
        label: "Workplace or Social account name",
      }),
      socialLink: fields.url({
        label: "Social media link",
      }),
    },
  }),
  iframe: component({
    preview: (props) => (
      <BoxWrapper>
        <style>
          {`
            iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
          `}
        </style>
        <div
          style={{ width: '100%', aspectRatio: '16/9' }}
          dangerouslySetInnerHTML={{ __html: props.fields.code.value }}
        />
      </BoxWrapper>
    ),
    label: 'iframe',
    schema: {
      code: fields.text({ label: 'Code' }),
    },
  }),
};

```

\

{% tweetEmbed
   tweet="https://x.com/ibuildthecloud/status/1757789265264796003?s=46&t=yK_oBmAbXkAraeOcoTu7Gg" /%}

\
Porerejrerw kewr newkrn wer newjr newj rnewj rnew jrnw rjwn rjw nrj n jw nj njw rnwjrenewjr newjr newjrewnr jew nrjewrnewjrnwjrnwejr newj rnew jrewnr jewnrjewrn wejrnwejr wner jewnrjewnrewjr newjr nwe jwen jewnrje wnj n j [https://www.globo.com/](https://www.globo.com/).
